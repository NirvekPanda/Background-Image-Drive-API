name: CD

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: "1.21"
  PROJECT_ID: "portfolio-420-69"
  REGION: "us-central1"
  SERVICE_NAME: "portfolio-images-api"
  REGISTRY: "gcr.io"

jobs:
  deploy:
    name: Deploy to Google Cloud Run
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

      - name: Build Docker image
        run: |
          docker build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .

      - name: Push Docker image to Google Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --concurrency 1000 \
            --timeout 300 \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}" \
            --add-cloudsql-instances ${{ secrets.CLOUD_SQL_CONNECTION_NAME }} \
            --set-secrets "GOOGLE_DRIVE_FOLDER_ID=google-drive-folder-id:latest,GOOGLE_MAPS_API_KEY=google-maps-api-key:latest,CLOUD_SQL_CONNECTION_NAME=cloud-sql-connection-name:latest,CLOUD_SQL_DATABASE=cloud-sql-database:latest,CLOUD_SQL_USER=cloud-sql-user:latest,CLOUD_SQL_PASSWORD=cloud-sql-password:latest,oauth-credentials=oauth-credentials:latest,oauth-token=oauth-token:latest,CORS_ALLOWED_ORIGINS=cors-allowed-origins:latest"

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "Service deployed at: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Health check
        run: |
          sleep 30  # Wait for service to be ready
          curl -f "$SERVICE_URL/health" || exit 1
          echo "Health check passed!"

      - name: Comment deployment status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Deployment Successful!**
              
              **Service URL:** ${{ env.SERVICE_URL }}
              **Commit:** ${{ github.sha }}
              **Image:** ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
              
              [View in Google Cloud Console](https://console.cloud.google.com/run/detail/${{ env.REGION }}/${{ env.SERVICE_NAME }}/metrics?project=${{ env.PROJECT_ID }})`
            })

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "Service URL: ${{ needs.deploy.outputs.service_url }}"

      - name: Notify on failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          exit 1
